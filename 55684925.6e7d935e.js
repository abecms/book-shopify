(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{145:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return a})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return d}));var i=t(1),r=t(9),o=(t(0),t(165)),s={},a={id:"shopifyplus",title:"shopifyplus",description:"# Shopify+",source:"@site/docs/shopifyplus.md",permalink:"/docs/shopifyplus",sidebar:"docs",previous:{title:"cart",permalink:"/docs/dynamisation/cart"},next:{title:"app",permalink:"/docs/dev/app"}},c=[{value:"Appeler un web service depuis le checkout sur le champ discount",id:"appeler-un-web-service-depuis-le-checkout-sur-le-champ-discount",children:[]},{value:"R\xe8gles de promotion",id:"r\xe8gles-de-promotion",children:[{value:"Introduction",id:"introduction",children:[]},{value:"Exp\xe9dition gratuite pour un type d&#39;exp\xe9dition sp\xe9cifique et un montant &gt; xeur",id:"exp\xe9dition-gratuite-pour-un-type-dexp\xe9dition-sp\xe9cifique-et-un-montant--xeur",children:[]},{value:"Exp\xe9dition gratuite pour un type d&#39;exp\xe9dition, un type de produit et un montant &gt; xeur",id:"exp\xe9dition-gratuite-pour-un-type-dexp\xe9dition-un-type-de-produit-et-un-montant--xeur",children:[]},{value:"Emp\xeacher les code promos saisis par les clients (lors des soldes par exemple)",id:"emp\xeacher-les-code-promos-saisis-par-les-clients-lors-des-soldes-par-exemple",children:[]},{value:"Exp\xe9dition gratuite pour les clients avec tag &quot;VIP&quot;",id:"exp\xe9dition-gratuite-pour-les-clients-avec-tag-vip",children:[]},{value:"Exp\xe9dition gratuite sur les clients qui ont d\xe9pens\xe9 + de xeur sur toutes leurs commandes",id:"exp\xe9dition-gratuite-sur-les-clients-qui-ont-d\xe9pens\xe9--de-xeur-sur-toutes-leurs-commandes",children:[]},{value:"Appliquer r\xe9duction sur la premi\xe8re commande d&#39;un client",id:"appliquer-r\xe9duction-sur-la-premi\xe8re-commande-dun-client",children:[]},{value:"Appliquer un prix barr\xe9 sur les clients logg\xe9s uniquement",id:"appliquer-un-prix-barr\xe9-sur-les-clients-logg\xe9s-uniquement",children:[]},{value:"Appliquer pourcentage de remise croissant en fonction du montant total du panier",id:"appliquer-pourcentage-de-remise-croissant-en-fonction-du-montant-total-du-panier",children:[]},{value:"Appliquer une r\xe9duction par palier",id:"appliquer-une-r\xe9duction-par-palier",children:[]},{value:"R\xe9duction par palier pour un type de produit",id:"r\xe9duction-par-palier-pour-un-type-de-produit",children:[]},{value:"Pourcentage de r\xe9duction sur le produit le moins cher du panier",id:"pourcentage-de-r\xe9duction-sur-le-produit-le-moins-cher-du-panier",children:[]},{value:"R\xe9duction si le client a accept\xe9 le marketing lors de sa commande pr\xe9c\xe9dente",id:"r\xe9duction-si-le-client-a-accept\xe9-le-marketing-lors-de-sa-commande-pr\xe9c\xe9dente",children:[]},{value:"Acheter 2 produits, l&#39;un des 2 est offert",id:"acheter-2-produits-lun-des-2-est-offert",children:[]},{value:"Acheter le produit A et obtenir x% de r\xe9duction sur le produit B si un code coupon a \xe9t\xe9 saisi",id:"acheter-le-produit-a-et-obtenir-x-de-r\xe9duction-sur-le-produit-b-si-un-code-coupon-a-\xe9t\xe9-saisi",children:[]},{value:"Acheter X quantit\xe9 du produit A, obtenir le produit B pour y (r\xe9duction en % ou montant)",id:"acheter-x-quantit\xe9-du-produit-a-obtenir-le-produit-b-pour-y-r\xe9duction-en--ou-montant",children:[]},{value:"Acheter 2 ou + du produit A et obtenez x% de r\xe9duction sur le produit le moins cher du panier",id:"acheter-2-ou--du-produit-a-et-obtenez-x-de-r\xe9duction-sur-le-produit-le-moins-cher-du-panier",children:[]}]}],p={rightToc:c};function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"shopify"},"Shopify+"),Object(o.b)("p",null,"Les apps ci-dessous n'existent que pour shopify+"),Object(o.b)("h1",{id:"migrer-de-magento-vers-shopify"},"Migrer de Magento vers Shopify"),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://apps.shopify.com/transporter"}),"https://apps.shopify.com/transporter")),Object(o.b)("h1",{id:"planifier-des-changements-de-contenu-du-site"},"Planifier des changements de contenu du site"),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://apps.shopify.com/launchpad"}),"https://apps.shopify.com/launchpad")),Object(o.b)("h1",{id:"cr\xe9er-un-workflow"},"Cr\xe9er un workflow"),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://apps.shopify.com/flow"}),"https://apps.shopify.com/flow")),Object(o.b)("h1",{id:"gift-cards"},"Gift cards"),Object(o.b)("h2",{id:"appeler-un-web-service-depuis-le-checkout-sur-le-champ-discount"},"Appeler un web service depuis le checkout sur le champ discount"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Cr\xe9er une app proxy qui pourra exposer une route via shopify :\n",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://shopify.dev/tutorials/display-data-on-an-online-store-with-an-application-proxy-app-extension"}),"https://shopify.dev/tutorials/display-data-on-an-online-store-with-an-application-proxy-app-extension"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},"Avec shopify+, il est possible d'injecter le js dans le fichier layout checkout.liquid. Sans shopify+, il est possible d'injecter un js en utilisant l'astuce des js suppl\xe9mentaires associ\xe9s \xe0 Google Analytics depuis les pr\xe9f\xe9rences de shopify"))),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"<script>\n  //const discountButton = document.querySelector('[data-trekkie-id=\"apply_discount_button\"]');\n  //discountButton.addEventListener('click', function(){\n  //  alert('Discount button was clicked.'); // Replace this line with your code\n  //});\n  document.addEventListener(\"DOMContentLoaded\", function() {\n    $('body').on('click', '[data-trekkie-id=\"apply_discount_button\"]', function(event) {\n      event.preventDefault()\n      var that = $(this)\n      $.get('/apps/giftcard/check-code?code='+$('#checkout_reduction_code').val()).then(function(data) {\n        console.log('resultat', data)\n        that.closest('form').submit()\n      });\n    });\n  });\n<\/script>\n")),Object(o.b)("p",null,"Avec cette m\xe9thode il est possible d'appeler un ws avant de soumettre le champ discount \xe0 Shopify."),Object(o.b)("h1",{id:"cr\xe9er-des-r\xe8gles-de-promotion-avanc\xe9es"},"Cr\xe9er des r\xe8gles de promotion avanc\xe9es"),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://apps.shopify.com/script-editor"}),"https://apps.shopify.com/script-editor")),Object(o.b)("h2",{id:"r\xe8gles-de-promotion"},"R\xe8gles de promotion"),Object(o.b)("h3",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"Il faut grouper toutes les r\xe8gles de promotion que l'on veut appliquer dans un tableau ex. :"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'CAMPAIGNS = [\n  # $5 off all items with the "sale" tag\n  ItemCampaign.new(\n    AndSelector.new(\n      TagSelector.new("sale"),\n      ExcludeGiftCardSelector.new,\n    ),\n    MoneyDiscount.new(5_00, "5$ off all items on sale",),\n  ),\n\n  # 10% off all items with a price lower than $100\n  ItemCampaign.new(\n    AndSelector.new(\n      ExcludeGiftCardSelector.new,\n      PriceSelector.new(:lower_than, Money.new(cents: 100_00)),\n    ),\n    PercentageDiscount.new(10, "10% off all items under 100$"),\n  ),\n\n  # Give every 3rd item with the tag "letter" for free\n  BogoCampaign.new(\n    TagSelector.new("letter"),\n    PercentageDiscount.new(100, "Third item is free"),\n    LowToHighPartitioner.new(2,1),\n  )\n]\n\n# Iterate through each of the discount campaigns.\nCAMPAIGNS.each do |campaign|\n  # Apply the campaign onto the cart.\n  campaign.run(Input.cart)\nend\n')),Object(o.b)("p",null,"Par ailleurs, il est impossible de mettre des dates dans les scripts. Il faut donc utiliser launchpad pour planifier des op\xe9rations."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Toujours exclure les cartes cadeaux de vos op\xe9rations commerciales : ",Object(o.b)("inlineCode",{parentName:"p"},"next if line_item.variant.product.gift_card?")," ou ",Object(o.b)("inlineCode",{parentName:"p"},"next if product.gift_card?"))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Pour mettre en avant dans le panier ces promos panier, on pourra utiliser les variables liquid ",Object(o.b)("inlineCode",{parentName:"p"},"line_item.original_line_price")," et ",Object(o.b)("inlineCode",{parentName:"p"},"line_item.message"),".")),Object(o.b)("h3",{id:"exp\xe9dition-gratuite-pour-un-type-dexp\xe9dition-sp\xe9cifique-et-un-montant--xeur"},"Exp\xe9dition gratuite pour un type d'exp\xe9dition sp\xe9cifique et un montant > xeur"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'# Ce script permet de proposer l\'exp\xe9dition gratuite pour le code du type d\'exp\xe9dition "Standard"\n# pour un montant total du panier de Plus de 200eur\n# et d\'indiquer \'exp\xe9dition offerte\' sur le panier\n\nmontant_minimum = 200\nmin_discount_order_amount = Money.new(cents:100) * montant_minimum\nmessage = "Exp\xe9dition offerte"\n\ntotal = Input.cart.subtotal_price\nif total > min_discount_order_amount\n  Input.shipping_rates.each do |shipping_rate|\n    next unless shipping_rate.code == "Standard"\n    shipping_rate.apply_discount(\n      shipping_rate.price,\n      message: message\n    )\n  end\nend\n\nOutput.shipping_rates = Input.shipping_rates\n')),Object(o.b)("h3",{id:"exp\xe9dition-gratuite-pour-un-type-dexp\xe9dition-un-type-de-produit-et-un-montant--xeur"},"Exp\xe9dition gratuite pour un type d'exp\xe9dition, un type de produit et un montant > xeur"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'# Ce script permet de proposer l\'exp\xe9dition gratuite pour le code du type d\'exp\xe9dition "Standard"\n# pour un montant total du panier de Plus de 200eur\n# et si le type de produit Bermudas est dans le panier\n# et d\'indiquer \'exp\xe9dition offerte\' sur le panier\n\nTYPES_PRODUITS = ["Bermudas"]\nMONTANT_MINIMUM = 200\n\n######################\n# DON\'T MODIFY BELOW #\n######################\nmin_discount_order_amount = Money.new(cents:100) * MONTANT_MINIMUM\nmessage = "Exp\xe9dition offerte"\n\napplyDiscount = false\ncart = Input.cart\ncart.line_items.each do |line_item|\n  product = line_item.variant.product\n  # Check the product type\n  if TYPES_PRODUITS.collect{|el| el.downcase }.include?(product.product_type.downcase)\n    applyDiscount = true\n  end\nend\n\ntotal = Input.cart.subtotal_price\nif total > min_discount_order_amount and applyDiscount\n  Input.shipping_rates.each do |shipping_rate|\n    next unless shipping_rate.code == "Standard"\n    shipping_rate.apply_discount(\n      shipping_rate.price,\n      message: message\n    )\n  end\nend\n\nOutput.shipping_rates = Input.shipping_rates\n')),Object(o.b)("h3",{id:"emp\xeacher-les-code-promos-saisis-par-les-clients-lors-des-soldes-par-exemple"},"Emp\xeacher les code promos saisis par les clients (lors des soldes par exemple)"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'if Input.cart.discount_code\n  Input.cart.discount_code.reject(\n    message: "Vous ne pouvez pas utiliser de code promo pendant les soldes"\n  )\nend\n\nOutput.cart = Input.cart\n')),Object(o.b)("h3",{id:"exp\xe9dition-gratuite-pour-les-clients-avec-tag-vip"},'Exp\xe9dition gratuite pour les clients avec tag "VIP"'),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"# Define a list of shipping service names that are eligible for free shipping for VIPs.\nELIGIBLE_SERVICES = ['Standard Ground Shipping']\n\n# Define the tag that identifies VIP customers.\nVIP_CUSTOMER_TAG = 'VIP'\n\n# If the customer is a VIP, give them free shipping on the defined services.\nif !Input.cart.customer.nil? and Input.cart.customer.tags.include?(VIP_CUSTOMER_TAG)\n  Input.shipping_rates.each do |shipping_rate|\n    if ELIGIBLE_SERVICES.include?(shipping_rate.name)\n      shipping_rate.apply_discount(shipping_rate.price, message: \"Free shipping for VIP customers!\")\n    end\n  end\nend\n\n# Export the rates.\nOutput.shipping_rates = Input.shipping_rates\n")),Object(o.b)("h3",{id:"exp\xe9dition-gratuite-sur-les-clients-qui-ont-d\xe9pens\xe9--de-xeur-sur-toutes-leurs-commandes"},"Exp\xe9dition gratuite sur les clients qui ont d\xe9pens\xe9 + de xeur sur toutes leurs commandes"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'MINIMUM_SPENT = 50 #dollars purchased in history as a customer\nMESSAGE = "Loyal Customer Promotion" #additional message\ncustomer = Input.cart.customer\n\nif customer\n  if customer.total_spent > (Money.new(cents:100) * MINIMUM_SPENT)\n    Input.shipping_rates.each do |shipping_rate|\n      if shipping_rate.name.include?("Insured Shipping and Handling (USPS Priority Express)")\n        shipping_rate.change_name("FREE VIP GROUND SHIPPING (USPS Priority Express)", { message: "" })\n        shipping_rate.apply_discount(shipping_rate.price, message: MESSAGE)\n      end\n    end\n  end\nend\n\nOutput.shipping_rates = Input.shipping_rates\n')),Object(o.b)("h3",{id:"appliquer-r\xe9duction-sur-la-premi\xe8re-commande-dun-client"},"Appliquer r\xe9duction sur la premi\xe8re commande d'un client"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'DISCOUNT_AMOUNT = 20\n\nif Input.cart.line_items.size > 1 && (Input.cart.customer.nil? || Input.cart.customer.orders_count < 1)\n    next if product.gift_card?\n    line_item = Input.cart.line_items.sort_by { |line_item| line_item.variant.price }.first\n    if line_item.quantity > 1\n        line_item = line_item.split(take: 1)\n        Input.cart.line_items << line_item\n    end\n    line_item.change_line_price(line_item.line_price * (1.0 - (DISCOUNT_AMOUNT / 100.0)), message: "#{DISCOUNT_AMOUNT}% off for first-time customers!")\nend\n\nOutput.cart = Input.cart\n')),Object(o.b)("h3",{id:"appliquer-un-prix-barr\xe9-sur-les-clients-logg\xe9s-uniquement"},"Appliquer un prix barr\xe9 sur les clients logg\xe9s uniquement"),Object(o.b)("p",null,"Il faut cr\xe9er un metafield sp\xe9cifique sur les variants d'un produit afin de stocker le prix \xe0 appliquer puis, sachant que les metafields ne sont pas expos\xe9s au script editor, il faut utiliser les product properties :"),Object(o.b)("p",null,"Pour cr\xe9er une propri\xe9t\xe9 de produit, il suffit de mettre un champ cach\xe9 sur la page d\xe9tail de produit :"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"<input type=\u201dhidden\u201d name=\u201dproperties[special_price]\u201d />\n")),Object(o.b)("p",null,"Ces propri\xe9t\xe9s sont soumises au shopping cart et peuvent \xeatre r\xe9cup\xe9r\xe9es dans le script editore comme \xe7a"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"line_item.properties.\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"# metatag containing the price to be applied : special_price\n\nif Input.cart.line_items.size > 1 && (Input.cart.customer.nil?)\n  line_item = Input.cart.line_items.sort_by { |line_item| line_item.variant.price }.first\n  if line_item.quantity > 1\n    line_item = line_item.split(take: 1)\n    Input.cart.line_items << line_item\n  end\n  line_item.change_line_price(line_item.properties['special_price']), message: \"Ventes priv\xe9es\")\nend\n\nOutput.cart = Input.cart\n")),Object(o.b)("h3",{id:"appliquer-pourcentage-de-remise-croissant-en-fonction-du-montant-total-du-panier"},"Appliquer pourcentage de remise croissant en fonction du montant total du panier"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'# Define spending thresholds, from lowest spend to highest cart value.\nSPENDING_THRESHOLDS = [\n  {\n    spend: 3000,   # spend amount (in cents)\n    discount: 10   # percentage discount\n  },\n  {\n    spend: 5000,\n    discount: 15\n  },\n  {\n    spend: 10000,\n    discount: 20\n  }\n]\n\n# Find any applicable spending threshold.\neligible_threshold = nil\nSPENDING_THRESHOLDS.each do |threshold|\n  if Input.cart.subtotal_price_was.cents >= threshold[:spend]\n    eligible_threshold = threshold\n  end\nend\n\n# Apply threshold.\nif !eligible_threshold.nil?\n  Input.cart.line_items.each do |line_item|\n    line_item.change_line_price(line_item.line_price * (1.0 - (eligible_threshold[:discount] / 100.0)), message: "#{eligible_threshold[:discount]}% off for purchases over $#{eligible_threshold[:spend] / 100}!")\n  end\nend\n\nOutput.cart = Input.cart\n')),Object(o.b)("h3",{id:"appliquer-une-r\xe9duction-par-palier"},"Appliquer une r\xe9duction par palier"),Object(o.b)("p",null,"Dans l'exemple : 20% de r\xe9duction pour + de 10 000 command\xe9s, 15% de r\xe9duction pour + de 1000, 10% pour + de 100 et 5% pour + de 10."),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'DISCOUNTS_BY_QUANTITY = {\n  10_000 => 20,\n  1_000 => 15,\n  100 => 10,\n  10 => 5,\n}\n\nInput.cart.line_items.each do |line_item|\n  next if line_item.variant.product.gift_card?\n\n  quantity, discount = DISCOUNTS_BY_QUANTITY.find do |quantity, _|\n    line_item.quantity >= quantity\n  end\n  next unless discount\n\n  message = "#{discount}% off when buying at least #{quantity}."\n  line_item.change_line_price(\n    line_item.line_price * (Decimal.new(1) - discount.to_d / 100),\n    message: message,\n  )\nend\n\nOutput.cart = Input.cart\n')),Object(o.b)("h3",{id:"r\xe9duction-par-palier-pour-un-type-de-produit"},"R\xe9duction par palier pour un type de produit"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"# Define a list of price tiers.\nPRICE_TIERS = [\n  # Pricing tiers for Shoes\n  {\n    product_types: ['Shoes'],\n    group_by: :product, # :product or :variant\n    tiers: [\n      {\n        quantity: 10,\n        discount_percentage: 10,\n        discount_message: '10% off for 10+'\n      },\n      {\n        quantity: 50,\n        discount_percentage: 15,\n        discount_message: '15% off for 50+'\n      }\n    ]\n  }\n]\n\n# In most cases, you don't need to edit below this line.\n\n##\n# Tiered pricing campaign.\nclass TieredPricingCampaign\n\n  def initialize(partitioner, tiers)\n    @partitioner = partitioner\n    @tiers = tiers.sort_by { |tier| tier[:quantity] }\n  end\n\n  def run(cart)\n    @partitioner.partition(cart).each do |k, items|\n      total_quantity = items.map(&:quantity).reduce(0, :+)\n      applicable_tier = find_tier_for_quantity(total_quantity)\n      unless applicable_tier.nil?\n        apply_tier_discount(items, applicable_tier)\n      end\n    end\n  end\n\n  private\n\n    def find_tier_for_quantity(quantity)\n      @tiers.select { |tier| tier[:quantity] <= quantity }.last\n    end\n\n    def apply_tier_discount(items, tier)\n      discount = get_tier_discount(tier)\n      items.each do |item|\n        discount.apply(item)\n      end\n    end\n\n    def get_tier_discount(tier)\n      PercentageDiscount.new(tier[:discount_percentage], tier[:discount_message])\n    end\n\nend\n\n##\n# Select line items by product type.\nclass ProductTypeSelector\n\n  def initialize(product_types)\n    @product_types = Array(product_types).map(&:upcase)\n  end\n\n  def match?(line_item)\n    @product_types.include?(line_item.variant.product.product_type.upcase)\n  end\n\n  def group_key\n    @product_types.join(',')\n  end\n\nend\n\n##\n# Apply a percentage discount to a line item.\nclass PercentageDiscount\n\n  def initialize(percent, message = '')\n    @percent = Decimal.new(percent) / 100.0\n    @message = message\n  end\n\n  def apply(item)\n    line_discount = item.original_line_price * @percent\n    new_line_price = item.original_line_price - line_discount\n    if new_line_price < item.line_price\n      item.change_line_price(new_line_price, message: @message)\n    end\n  end\n\nend\n\n##\n# A pricing tier partition.\nclass TierPartitioner\n\n  def initialize(selector, group_by)\n    @selector = selector\n    @group_by = group_by\n  end\n\n  def partition(cart)\n    # Filter items\n    items = cart.line_items.select { |item| @selector.match?(item) }\n\n    # Group items using the appropriate key.\n    items.group_by { |item| group_key(item) }\n  end\n\n  private\n\n    def group_key(line_item)\n      case @group_by\n        when :product\n          line_item.variant.product.id\n        when :variant\n          line_item.variant.id\n        else\n          @selector.group_key\n      end\n    end\n\nend\n\n##\n# Instantiate and run Price Tiers.\nPRICE_TIERS.each do |pt|\n  TieredPricingCampaign.new(\n    TierPartitioner.new(\n      ProductTypeSelector.new(pt[:product_types]),\n      pt[:group_by]\n    ),\n    pt[:tiers]\n  ).run(Input.cart)\nend\n\n##\n# Export changes.\nOutput.cart = Input.cart\n")),Object(o.b)("h3",{id:"pourcentage-de-r\xe9duction-sur-le-produit-le-moins-cher-du-panier"},"Pourcentage de r\xe9duction sur le produit le moins cher du panier"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'DISCOUNT_AMOUNT = 15\n\nif (Input.cart.line_items.size > 1)\n  line_item = Input.cart.line_items.sort_by { |line_item| line_item.variant.price }.first\n  if line_item.quantity > 1\n    line_item = line_item.split(take: 1)\n    Input.cart.line_items << line_item\n  end\n  line_item.change_line_price(line_item.line_price * (1.0 - (DISCOUNT_AMOUNT / 100.0)), message: "#{DISCOUNT_AMOUNT}% off!")\nend\n\nOutput.cart = Input.cart\n')),Object(o.b)("h3",{id:"r\xe9duction-si-le-client-a-accept\xe9-le-marketing-lors-de-sa-commande-pr\xe9c\xe9dente"},"R\xe9duction si le client a accept\xe9 le marketing lors de sa commande pr\xe9c\xe9dente"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'# Define the discount for eligible customers.\nDISCOUNT_AMOUNT = 10\n\n# Checks to see if this is a customer\'s second order, and that they opted into marketing when they placed their first order.\nif (!Input.cart.customer.nil? && Input.cart.customer.orders_count == 1 && Input.cart.customer.accepts_marketing?)\n  Input.cart.line_items.each do |line_item|\n    line_item.change_line_price(line_item.line_price * (1.0 - (DISCOUNT_AMOUNT / 100.0)), message: "#{DISCOUNT_AMOUNT}% off for subscribing to our newsletter!")\n  end\nend\n\nOutput.cart = Input.cart\n')),Object(o.b)("h3",{id:"acheter-2-produits-lun-des-2-est-offert"},"Acheter 2 produits, l'un des 2 est offert"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'PAID_ITEM_COUNT = 2\nDISCOUNTED_ITEM_COUNT = 1\n\n# Returns the integer amount of items that must be discounted next\n# given the amount of items seen\n#\ndef discounted_items_to_find(total_items_seen, discounted_items_seen)\n  Integer(total_items_seen / (PAID_ITEM_COUNT + DISCOUNTED_ITEM_COUNT) * DISCOUNTED_ITEM_COUNT) - discounted_items_seen\nend\n\n# Partitions the items and returns the items that are to be discounted.\n#\n# Arguments\n# ---------\n#\n# * cart\n#   The cart to which split items will be added (typically Input.cart).\n#\n# * line_items\n#   The selected items that are applicable for the campaign.\n#\ndef partition(cart, line_items)\n  # Sort the items by price from high to low\n  sorted_items = line_items.sort_by{|line_item| line_item.variant.price}.reverse\n  # Create an array of items to return\n  discounted_items = []\n  # Keep counters of items seen and discounted, to avoid having to recalculate on each iteration\n  total_items_seen = 0\n  discounted_items_seen = 0\n\n  # Loop over all the items and find those to be discounted\n  sorted_items.each do |line_item|\n    total_items_seen += line_item.quantity\n    # After incrementing total_items_seen, see if any items must be discounted\n    count = discounted_items_to_find(total_items_seen, discounted_items_seen)\n    # If there are none, skip to the next item\n    next if count <= 0\n\n    if count >= line_item.quantity\n      # If the full item quantity must be discounted, add it to the items to return\n      # and increment the count of discounted items\n      discounted_items.push(line_item)\n      discounted_items_seen += line_item.quantity\n    else\n      # If only part of the item must be discounted, split the item\n      discounted_item = line_item.split(take: count)\n      # Insert the newly-created item in the cart, right after the original item\n      position = cart.line_items.find_index(line_item)\n      cart.line_items.insert(position + 1, discounted_item)\n      # Add it to the list of items to return\n      discounted_items.push(discounted_item)\n      discounted_items_seen += discounted_item.quantity\n    end\n  end\n\n  # Return the items to be discounted\n  discounted_items\nend\n\neligible_items = Input.cart.line_items.select do |line_item|\n  product = line_item.variant.product\n  !product.gift_card? && product.id == 592406273\nend\n\ndiscounted_line_items = partition(Input.cart, eligible_items)\ndiscounted_line_items.each do |line_item|\n  line_item.change_line_price(Money.zero, message: "Buy 2 get 1 free")\nend\n\nOutput.cart = Input.cart\n')),Object(o.b)("h3",{id:"acheter-le-produit-a-et-obtenir-x-de-r\xe9duction-sur-le-produit-b-si-un-code-coupon-a-\xe9t\xe9-saisi"},"Acheter le produit A et obtenir x% de r\xe9duction sur le produit B si un code coupon a \xe9t\xe9 saisi"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'# Buy anything from collection A and get anything from collection B with X% discount,\n# if discount code XYZ is applied\n\n# Custom Message\nCHECKOUT_MESSAGE = "Get a 50% off"\n\n# Discount code which should me appled\nDISCOUNT_CODE = "GET50OFF"\n\nCOLLECTION_A = ["BACKPACKS"]\n\nCOLLECTION_B = ["SHIRTS"]\n\n# DISCOUNT VALUE (WITHOUT "%")\nDISCOUNT_VALUE = 50\n\n\n# === Do not change anything below ===\n\ncart = Input.cart\n\ndiscounted_items_qty = 0\ndiscount_percent = Decimal.new(DISCOUNT_VALUE) / 100.0\n\n\n# Calculate eligible discounted items (X <= ITEMS FROM A COLLECTION)\ncart.line_items.each do |line_item|\n  product = line_item.variant.product\n  if COLLECTION_A.collect{|el| el.downcase }.include?(product.product_type.downcase)\n    discounted_items_qty += line_item.quantity\n  end\nend\n\n\nsubtotal = cart.subtotal_price_was\n\nis_free_item_applied = false\n\nif cart.discount_code\n  if cart.discount_code.code == DISCOUNT_CODE\n      cart.line_items.each do |line_item|\n        product = line_item.variant.product\n        if COLLECTION_B.collect{|el| el.downcase }.include?(product.product_type.downcase) and\n          discounted_items_qty > 0\n\n          if(discounted_items_qty < line_item.quantity)\n            free_item = line_item.split(take: discounted_items_qty)\n            cart.line_items.push(free_item)\n          else\n            free_item = line_item\n          end\n\n          new_price = line_item.line_price - (line_item.line_price * discount_percent)\n\n          free_item.change_line_price(new_price, message: CHECKOUT_MESSAGE)\n          discounted_items_qty -= free_item.quantity\n        end\n      end\n  end\nend\n\nOutput.cart = Input.cart\n')),Object(o.b)("h3",{id:"acheter-x-quantit\xe9-du-produit-a-obtenir-le-produit-b-pour-y-r\xe9duction-en--ou-montant"},"Acheter X quantit\xe9 du produit A, obtenir le produit B pour y (r\xe9duction en % ou montant)"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"# ================================================================\n# Launch campaign if discount code is present\n#\n# ================================================================\nCODE = 'CADEAU15'\n\n# ================================ Customizable Settings ================================\n# ================================================================\n# Tiered Discounts by Spend Threshold\n#\n# If the cart total is greater than (or equal to) an entered\n# threshold, the associated discount is applied to the cart. The\n# discount will be spread, as evenly as possible, across all line\n# items.\n#\n# - 'threshold' is the spend amount needed to qualify\n# - 'discount_amount' is the dollar discount to apply to the\n# cart\n# - 'discount_message' is the message to show when a discount\n# is applied\n# ================================================================\nSPENDING_THRESHOLDS_FILTERED_TAG = [\n  {\n    product_selector_match_type: :include,\n    product_selector_type: :tag,\n    product_selectors: [\"season_H20\"],\n    tiers: [\n      {\n        threshold: 75,\n        discount_type: :dollar,\n        discount_amount: 15,\n        discount_message: 'Remise CADEAU15',\n      }\n    ]\n  }\n]\n\n\nBUY_X_GET_Y_FOR_Z = [\n  {\n    product_selector_match_type: :include,\n    product_selector_type: :tag,\n    product_selectors: [\"operation_noel\"],\n    quantity_to_buy: 1,\n    quantity_to_discount: 1,\n    discount_type: :percent,\n    discount_amount: 50,\n    discount_message: 'Un artcle achet\xe9, 50% de remise sur le deuxi\xe8me!',\n  },\n]\n\n# ================================================================\n# ProductSelector\n#\n# Finds matching products by the entered criteria.\n# ================================================================\nclass ProductSelector2\n  def initialize(match_type, selector_type, selectors)\n    @match_type = match_type\n    @comparator = match_type == :include ? 'any?' : 'none?'\n    @selector_type = selector_type\n    @selectors = selectors\n  end\n\n  def match?(line_item)\n    if self.respond_to?(@selector_type)\n      self.send(@selector_type, line_item)\n    else\n      raise RuntimeError.new('Invalid product selector type')\n    end\n  end\n\n  def tag(line_item)\n    product_tags = line_item.variant.product.tags.map { |tag| tag.downcase.strip }\n    @selectors = @selectors.map { |selector| selector.downcase.strip }\n    (@selectors & product_tags).send(@comparator)\n  end\n\n  def type(line_item)\n    @selectors = @selectors.map { |selector| selector.downcase.strip }\n    (@match_type == :include) == @selectors.include?(line_item.variant.product.product_type.downcase.strip)\n  end\n\n  def vendor(line_item)\n    @selectors = @selectors.map { |selector| selector.downcase.strip }\n    (@match_type == :include) == @selectors.include?(line_item.variant.product.vendor.downcase.strip)\n  end\n\n  def product_id(line_item)\n    (@match_type == :include) == @selectors.include?(line_item.variant.product.id)\n  end\n\n  def variant_id(line_item)\n    (@match_type == :include) == @selectors.include?(line_item.variant.id)\n  end\n\n  def all(line_item)\n    true\n  end\nend\n\n# ================================================================\n# DiscountApplicator\n#\n# Applies the entered discount to the supplied line item.\n# ================================================================\nclass DiscountApplicator2\n  def initialize(discount_type, discount_amount, discount_message)\n    @discount_type = discount_type\n    @discount_message = discount_message\n\n    @discount_amount = if discount_type == :percent\n      1 - (discount_amount * 0.01)\n    else\n      Money.new(cents: 100) * discount_amount\n    end\n  end\n\n  def apply(line_item)\n    new_line_price = if @discount_type == :percent\n      line_item.line_price * @discount_amount\n    else\n      [line_item.line_price - (@discount_amount * line_item.quantity), Money.zero].max\n    end\n\n    line_item.change_line_price(new_line_price, message: @discount_message)\n  end\nend\n\n# ================================================================\n# BuyXGetYForZCampaign\n#\n# Buy a certain number of \"matching\" items, get a certain number\n# of the same matching items with the entered discount applied.\n# ================================================================\nclass BuyXGetYForZCampaign\n  def initialize(campaigns)\n    @campaigns = campaigns\n  end\n\n  def run(cart)\n    @campaigns.each do |campaign|\n      product_selector = ProductSelector2.new(\n        campaign[:product_selector_match_type],\n        campaign[:product_selector_type],\n        campaign[:product_selectors],\n      )\n\n      eligible_items = cart.line_items.select { |line_item| product_selector.match?(line_item) }\n\n      next if eligible_items.nil?\n\n      eligible_items = eligible_items.sort_by { |line_item| -line_item.variant.price }\n      quantity_to_buy = campaign[:quantity_to_buy]\n      quantity_to_discount = campaign[:quantity_to_discount]\n      bundle_size = quantity_to_buy + quantity_to_discount\n      number_of_bundles = (eligible_items.map(&:quantity).reduce(0, :+) / bundle_size).floor\n      number_of_discountable_items = number_of_bundles * quantity_to_discount\n\n      next unless number_of_discountable_items > 0\n\n      discount_applicator = DiscountApplicator2.new(\n        campaign[:discount_type],\n        campaign[:discount_amount],\n        campaign[:discount_message]\n      )\n\n      self.loop_items(\n        discount_applicator, cart, eligible_items, number_of_discountable_items, quantity_to_buy, quantity_to_discount\n      )\n    end\n  end\n\n  def loop_items(discount_applicator, cart, line_items, num_to_discount, quantity_to_buy, quantity_to_discount)\n    surplus = 0\n    bundle_size = quantity_to_buy + quantity_to_discount\n\n    line_items.each do |line_item|\n      line_quantity = line_item.quantity + surplus\n\n      if line_quantity > quantity_to_buy\n        bundles_per_line = (line_quantity / bundle_size).floor\n        take_quantity = bundles_per_line * quantity_to_discount\n        surplus += (line_quantity - (bundle_size * bundles_per_line))\n\n        if line_item.quantity > take_quantity\n          discount_item = line_item.split(take: take_quantity)\n          discount_applicator.apply(discount_item)\n          position = cart.line_items.find_index(line_item)\n          cart.line_items.insert(position + 1, discount_item)\n          num_to_discount -= take_quantity\n        else\n          discount_applicator.apply(line_item)\n          num_to_discount -= line_item.quantity\n        end\n      else\n        surplus += line_quantity\n      end\n\n      break if num_to_discount <= 0\n    end\n  end\nend\n\n# ================================ Script Code (do not edit) ================================\n# ================================================================\n# DollarDiscountApplicator\n#\n# Applies the entered discount to the supplied line item.\n# ================================================================\nclass DollarDiscountApplicator\n  def initialize(discount_message)\n    @discount_message = discount_message\n  end\n\n  def apply(line_item, discount_amount)\n    new_line_price = line_item.line_price - discount_amount\n    line_item.change_line_price(new_line_price, message: @discount_message)\n  end\nend\n\n# ================================================================\n# TieredDiscountBySpendCampaign\n#\n# If the cart total is greater than (or equal to) an entered\n# threshold, the associated discount is applied to the cart. The\n# discount will be spread, as evenly as possible, across all line\n# items.\n# ================================================================\nclass TieredDiscountBySpendAndTagCampaign\n  def initialize(campaigns)\n    @campaigns = campaigns\n    #@tiers = campaign.tiers.sort_by { |tier| tier[:threshold] }.reverse\n  end\n\n  def run(cart)\n    @campaigns.each do |campaign|\n      product_selector = ProductSelector.new(\n        campaign[:product_selector_match_type],\n        campaign[:product_selector_type],\n        campaign[:product_selectors],\n      )\n      tiers = campaign[:tiers].sort_by { |tier| tier[:threshold] }.reverse\n      applicable_items = cart.line_items.select { |line_item| product_selector.match?(line_item) }\n      next if applicable_items.nil?\n\n      total_applicable_cost = applicable_items.map(&:line_price).reduce(Money.zero, :+)\n      applicable_tier = tiers.find { |tier|  total_applicable_cost >= (Money.new(cents: 100) * tier[:threshold]) }\n\n      next if applicable_tier.nil?\n\n      #discount_applicator = DiscountApplicator.new(\n      # applicable_tier[:discount_type],\n      #  applicable_tier[:discount_amount],\n      #  applicable_tier[:discount_message]\n      #)\n\n      #applicable_items.each do |line_item|\n      #  discount_applicator.apply(line_item)\n      #end\n\n      return if applicable_tier.nil?\n\n      discount_applicator = DollarDiscountApplicator.new(applicable_tier[:discount_message])\n      discount_amount = applicable_tier[:discount_amount]\n      items = applicable_items.sort_by { |line_item| line_item.variant.price }\n      self.loop_items(cart, items, discount_amount, discount_applicator)\n    end\n  end\n\n  def loop_items(cart, line_items, discount_amount, discount_applicator)\n    avg_discount = (discount_amount.to_f * (1 / line_items.map(&:quantity).reduce(0, :+))).round(2)\n    avg_discount = Money.new(cents: 100) * avg_discount\n    discount_amount = Money.new(cents: 100) * discount_amount\n\n    line_items.each_with_index do |line_item, index|\n      break if discount_amount <= Money.zero\n\n      line_discount = avg_discount * line_item.quantity\n\n      if discount_amount < line_discount || index == (line_items.size - 1)\n        discount_update = line_item.line_price > discount_amount ? discount_amount : line_item.line_price\n      else\n        discount_update = line_item.line_price > line_discount ? line_discount : line_item.line_price\n      end\n\n      discount_amount -= discount_update\n      discount_applicator.apply(line_item, discount_update)\n    end\n  end\nend\n\n# ================================ Script Code (do not edit) ================================\n# ================================================================\n# ProductSelector\n#\n# Finds matching products by the entered criteria.\n# ================================================================\nclass ProductSelector\n  def initialize(match_type, selector_type, selectors)\n    @match_type = match_type\n    @comparator = match_type == :include ? 'any?' : 'none?'\n    @selector_type = selector_type\n    @selectors = selectors\n  end\n\n  def match?(line_item)\n    if @selector_type == :tag\n      product_tags = line_item.variant.product.tags.map { |tag| tag.downcase.strip }\n      @selectors = @selectors.map { |selector| selector.downcase.strip }\n      (@selectors & product_tags).send(@comparator)\n    elsif @selector_type == :type\n      @selectors = @selectors.map { |selector| selector.downcase.strip }\n      (@match_type == :include) == @selectors.include?(line_item.variant.product.product_type.downcase.strip)\n    elsif @selector_type == :vendor\n      @selectors = @selectors.map { |selector| selector.downcase.strip }\n      (@match_type == :include) == @selectors.include?(line_item.variant.product.vendor.downcase.strip)\n    elsif @selector_type == :product_id\n      (@match_type == :include) == @selectors.include?(line_item.variant.product.id)\n    elsif @selector_type == :variant_id\n      (@match_type == :include) == @selectors.include?(line_item.variant.id)\n    else\n      raise RuntimeError.new('Invalid product selector type')\n    end\n  end\nend\n\n# ================================================================\n# DiscountApplicator\n#\n# Applies the entered discount to the supplied line item.\n# ================================================================\nclass DiscountApplicator\n  def initialize(discount_type, discount_amount, discount_message)\n    @discount_type = discount_type\n    @discount_message = discount_message\n\n    @discount_amount = if discount_type == :percent\n      1 - (discount_amount * 0.01)\n    else\n      Money.new(cents: 100) * discount_amount\n    end\n  end\n\n  def apply(line_item)\n    new_line_price = if @discount_type == :percent\n      line_item.line_price * @discount_amount\n    else\n      [line_item.line_price - (@discount_amount * line_item.quantity), Money.zero].max\n    end\n\n    line_item.change_line_price(new_line_price, message: @discount_message)\n  end\nend\n\n# ================================================================\n# PlayCampaignIfDiscountCodePresent\n#\n#\n# ================================================================\n\nclass EnableCampaignIfCodeCampaign\n  def initialize(code, campaign)\n    @campaign = campaign\n    @code = code\n  end\n\n  def run(cart)\n    return unless !cart.discount_code.nil? && cart.discount_code.code == @code\n\n    @campaign.run(Input.cart)\n  end\nend\n\nCAMPAIGNS = [\n  BuyXGetYForZCampaign.new(BUY_X_GET_Y_FOR_Z),\n]\n\nCAMPAIGNS.each do |campaign|\n  campaign.run(Input.cart)\nend\n\nOutput.cart = Input.cart\n\n")),Object(o.b)("h3",{id:"acheter-2-ou--du-produit-a-et-obtenez-x-de-r\xe9duction-sur-le-produit-le-moins-cher-du-panier"},"Acheter 2 ou + du produit A et obtenez x% de r\xe9duction sur le produit le moins cher du panier"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),'DISCOUNT_PERCENT=30\nCART_DISCOUNT_MESSAGE="Buy 2 or more items and get 30% off the least expensive item"\n\n\neligible_items = Input.cart.line_items.select do |line_item|\n  product = line_item.variant.product\n  !product.gift_card?\nend\n\n# Sort eligible items by price, least exensive first\neligible_items = eligible_items.sort_by{|line_item| line_item.variant.price}\n\ntotal_items = 0\neligible_items.each do |line_item|\n  total_items += line_item.quantity\nend\n\nif(total_items >= 2)\n  # pull the least exensive item\n  line_item = eligible_items.first\n  # calculate the discount to be applied\n  percent = Decimal.new(DISCOUNT_PERCENT) / 100.0\n\n\n  # make sure we don\'t discount multiple items hiding in a single line item\n  if line_item.quantity == 1\n    line_discount = line_item.line_price * percent\n    puts "line_discount = #{line_discount}"\n    # Just discount the item directly\n    line_item.change_line_price(line_item.line_price - line_discount, message: CART_DISCOUNT_MESSAGE)\n  else\n    # If only part of the item must be discounted, split the item\n    discounted_item = line_item.split(take: 1)\n    # Insert the newly-created item in the cart, right after the original item\n    position = Input.cart.line_items.find_index(line_item)\n    line_discount = discounted_item.line_price * percent\n    puts "line_discount = #{line_discount}"\n    Input.cart.line_items.insert(position + 1, discounted_item)\n    # Discount the new item\n    discounted_item.change_line_price(discounted_item.line_price - line_discount, message: CART_DISCOUNT_MESSAGE)\n  end\nend\n\n\nOutput.cart = Input.cart\n')))}d.isMDXComponent=!0},165:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var i=t(0),r=t.n(i);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),d=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a({},n,{},e)),t},u=function(e){var n=d(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},_=Object(i.forwardRef)((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=d(t),_=i,m=u["".concat(s,".").concat(_)]||u[_]||l[_]||o;return t?r.a.createElement(m,a({ref:n},p,{components:t})):r.a.createElement(m,a({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=_;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var p=2;p<o;p++)s[p]=t[p];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}_.displayName="MDXCreateElement"}}]);